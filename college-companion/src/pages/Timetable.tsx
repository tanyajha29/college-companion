import React, { useState, useEffect, useCallback } from "react";
import axios from "axios";
import { Clock, CalendarDays, Plus, Trash2, Edit, X, Save, AlertTriangle, ChevronDown } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

type TimetableEntry = {
  timetable_id: number;
  user_id: number;
  day: string;
  time: string;
  subject: string;
  location: string;
};

// --- CONSTANTS ---
const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
const times = ["09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00"];

export default function Timetable() {
  const [entries, setEntries] = useState<TimetableEntry[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [editingEntry, setEditingEntry] = useState<TimetableEntry | null>(null);
  const [form, setForm] = useState({ day: "", time: "", subject: "", location: "" });
  const [selectedDay, setSelectedDay] = useState(days[0]);
  const [isLoading, setIsLoading] = useState(true);
  
  // ðŸ”‘ NEW: Role and Filter States
  const [role, setRole] = useState<'admin' | 'staff' | 'student' | null>(null);
  const [filters, setFilters] = useState({ department: "INFT", division: "A" });

  // Access Control Checks
  const isAdminOrStaff = role === 'admin' || role === 'staff';
  const canEdit = isAdminOrStaff; // Only Admin/Staff can add/edit/delete

  const userId = 1; // ðŸ”‘ Replace with logged-in user_id from auth later

  // 1. Initial Load and Role Check
  useEffect(() => {
    const storedRole = localStorage.getItem("role") as 'admin' | 'staff' | 'student' | null;
    setRole(storedRole);

    const fetchData = () => {
        console.log("Fetching timetable..."); 
        setIsLoading(true);
        axios
        .get("http://localhost:5000/api/timetable", {
          // You might adjust the API call here later to pass department/division filters
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }
        })
        .then((res) => {
          console.log("âœ… Response:", res.data);
          setEntries(res.data);
          setIsLoading(false);
          
          const currentDay = new Date().toLocaleDateString('en-US', { weekday: 'long' });
          if(days.includes(currentDay)) {
              setSelectedDay(currentDay);
          }
        })
        .catch((err) => {
            console.error(err);
            setIsLoading(false);
        });
    };
    if (storedRole) {
      fetchData();
    } else {
      setIsLoading(false);
    }
  }, []);
  // NOTE: If you implement filtering on the backend, you would add filters to the dependency array.

  // The rest of the logic remains unchanged:
  const hasConflict = (day: string, time: string, id?: number) => {
Â  Â  return entries.some(
Â  Â  Â  (entry) => 
Â  Â  Â  Â  entry.day === day && 
Â  Â  Â  entry.time.slice(0,5) === time.slice(0,5) && 
Â  Â  Â  entry.timetable_id !== id
Â  Â  );
Â  };

Â  const openModal = (entry?: TimetableEntry) => {
    if (!canEdit && entry) return; // Prevent student from opening edit modal
    if (!canEdit && !entry) return; // Prevent student from opening add modal

Â  Â  if (entry) {
Â  Â  Â  setEditingEntry(entry);
Â  Â  Â  setForm({
Â  Â  Â  Â  day: entry.day,
Â  Â  Â  Â  time: entry.time,
Â  Â  Â  Â  subject: entry.subject,
Â  Â  Â  Â  location: entry.location || "",
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  setEditingEntry(null);
Â  Â  Â  setForm({ day: selectedDay, time: times[0], subject: "", location: "" });
Â  Â  }
Â  Â  setShowModal(true);
Â  };

Â  const handleSave = async () => {
Â  Â  if (!form.day || !form.time || !form.subject) return;

    if (hasConflict(form.day, form.time, editingEntry?.timetable_id)) {
        alert("Conflict: A session already exists at this time slot.");
        return;
    }

Â  Â  if (editingEntry) {
Â  Â  Â  try {
Â  Â  Â  Â  await axios.put(
Â  Â  Â  Â  Â  `http://localhost:5000/api/timetable/${editingEntry.timetable_id}`,
Â  Â  Â  Â  Â  form,
Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  );

Â  Â  Â  Â  setEntries((prev) =>
Â  Â  Â  Â  Â  prev.map((e) =>
Â  Â  Â  Â  Â  Â  e.timetable_id === editingEntry.timetable_id ? { ...e, ...form } : e
Â  Â  Â  Â  Â  )
Â  Â  Â  Â  );
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err);
Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  try {
Â  Â  Â  Â  const res = await axios.post("http://localhost:5000/api/timetable", {...form, user_id: userId}, {
Â  Â  Â  Â  Â  headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }
Â  Â  Â  Â  });

Â  Â  Â  Â  setEntries((prev) => [...prev, res.data]);
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err);
Â  Â  Â  }
Â  Â  }
Â  Â  setShowModal(false);
Â  };

Â  const handleDelete = async (id: number) => {
    if (!canEdit) return; // Prevent non-authorized deletion
Â  Â  if(!window.confirm("Are you sure you want to delete this session?")) return;
Â  Â  try {
Â  Â  Â  await axios.delete(`http://localhost:5000/api/timetable/${id}`, {
Â  Â  Â  Â  headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
Â  Â  Â  });

Â  Â  Â  setEntries((prev) => prev.filter((e) => e.timetable_id !== id));
Â  Â  } catch (err) {
Â  Â  Â  console.error(err);
Â  Â  }
Â  };
    
  // Function to render the session slot content (Modified for RBAC)
  const renderSessionSlot = (day: string, time: string) => {
    const entry = entries.find((e) => e.day === day && e.time.slice(0,5) === time.slice(0,5));
    const conflict = hasConflict(day, time, entry?.timetable_id);

    const baseClasses = "rounded-lg p-3 h-full w-full flex flex-col justify-center items-center text-center transition duration-200 ease-in-out";
    
    // Only Admin/Staff can interact with empty slots
    const emptyClasses = canEdit 
        ? "border-2 border-dashed border-gray-300 dark:border-gray-700 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer"
        : "border-2 border-dashed border-gray-100 dark:border-gray-800 cursor-default";

    const sessionClasses = `bg-white dark:bg-gray-700 shadow-md hover:shadow-lg border border-transparent 
        ${canEdit ? "hover:border-blue-500 cursor-pointer" : "cursor-default"}
        ${conflict && canEdit ? "border-red-500 ring-2 ring-red-300" : ""}`;

    if (entry) {
        return (
            <motion.div 
                key={entry.timetable_id}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                whileHover={canEdit ? { scale: 1.02 } : {}} // Hover effect only for Admin/Staff
                className={`${baseClasses} ${sessionClasses}`}
                onClick={() => canEdit ? openModal(entry) : null} // Allow edit only if Admin/Staff
            >
                <div className="font-extrabold text-blue-600 dark:text-blue-400 text-lg leading-tight">
                    {entry.subject}
                </div>
                <div className="text-sm text-gray-700 dark:text-gray-300 mt-1">
                    <span className="font-semibold">{entry.location}</span>
                </div>
                {conflict && canEdit && ( // Only show conflict warning to staff/admin
                    <div className="text-red-500 text-xs mt-1 flex items-center gap-1">
                        <AlertTriangle size={12}/> CONFLICT
                    </div>
                )}
                {/* Delete button (only visible and functional for Admin/Staff) */}
                {canEdit && (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleDelete(entry.timetable_id);
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-red-500 hover:text-red-700 dark:hover:text-red-400 mt-2 p-1 rounded-full hover:bg-red-50/50 transition"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Trash2 size={16} />
Â  Â  Â  Â  Â  Â  Â  Â  </button>
                )}
            </motion.div>
        );
    }

    // Empty slot (clickable only if Admin/Staff)
    return (
        <motion.div 
            className={`${baseClasses} ${emptyClasses}`} 
            onClick={() => canEdit ? openModal() : null}
            whileHover={canEdit ? { scale: 1.02 } : {}}
        >
            {canEdit ? (
                <Plus size={20} className="text-gray-500 dark:text-gray-400" />
            ) : (
                <span className="text-gray-400 text-sm">-</span>
            )}
        </motion.div>
    );
  };
  
  // Handle unauthorized/loading states outside the main return
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center p-10">
        <Clock size={32} className="text-blue-500 animate-spin mb-4" />
        <p className="text-xl text-gray-600 dark:text-gray-400 ml-4">Loading your timetable...</p>
      </div>
    );
  }

  if (!role) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center p-10 text-red-600 dark:text-red-400">
        Authentication Error: Please log in to view the timetable.
      </div>
    );
  }


Â  return (
Â  Â  <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white transition-colors duration-500 p-6 sm:p-10">
Â  Â  Â  
Â  Â  Â  <header className="max-w-7xl mx-auto mb-8">
Â  Â  Â  Â  {/* Centered Heading */}
Â  Â  Â  Â  <h1 className="justify-center text-4xl font-extrabold text-blue-600 dark:text-blue-400 mb-2 transition-colors duration-500 flex items-center gap-3 pt-12 ">
Â  Â  Â  Â  Â  <CalendarDays size={38} /> Weekly Timetable
Â  Â  Â  Â  </h1>
Â  Â  Â  Â  
Â  Â  Â  Â 
Â  Â  Â  Â  Â  <p className="text-center text-lg text-gray-600 dark:text-gray-400">
Â  Â  Â  Â  Â  Â  {canEdit ? "Manage your class schedule. Click on a slot to add or edit." : "View your current class schedule."}
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  
<div className="flex justify-between items-center mt-4 flex-wrap gap-4">
        
Â  Â  Â  Â  Â  {/* ðŸŽ¯ NEW: Department/Division Filters (Admin/Staff only) */}
Â  Â  Â  Â  Â  {isAdminOrStaff && (
Â  Â  Â  Â  Â  Â  <div className="flex items-center space-x-3 bg-white dark:bg-gray-800 p-3 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700">
Â  Â  Â  Â  Â  Â  Â  <span className="text-sm font-semibold text-gray-700 dark:text-gray-300">Viewing:</span>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  className="border rounded-lg p-2 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 transition"
Â  Â  Â  Â  Â  Â  Â  Â  value={filters.department}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFilters({ ...filters, department: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="INFT">INFT</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="COMP">COMP</option>
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  className="border rounded-lg p-2 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 transition"
Â  Â  Â  Â  Â  Â  Â  Â  value={filters.division}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setFilters({ ...filters, division: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="A">Division A</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="B">Division B</option>
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Add New Session Button (Admin/Staff only) */}
Â  Â  Â  Â  {canEdit && (
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className="mt-4 px-5 py-2 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition duration-200 shadow-md flex items-center gap-2"
Â  Â  Â  Â  Â  Â  onClick={() => openModal()}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Plus size={20} /> Add New Session
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  )}
Â  Â  Â  </header>

Â  Â  Â  <div className="overflow-x-auto max-w-7xl mx-auto bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-4 md:p-6">
Â  Â  Â  Â  
Â  Â  Â  Â  <table className="w-full">
Â  Â  Â  Â  Â  <thead>
Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left w-1/12 text-sm font-bold text-gray-500 dark:text-gray-300 border-b dark:border-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Time
Â  Â  Â  Â  Â  Â  Â  </th>
Â  Â  Â  Â  Â  Â  Â  {days.map((day) => (
Â  Â  Â  Â  Â  Â  Â  Â  <th 
                    key={day} 
                    className={`p-3 text-center text-sm font-bold border-b dark:border-gray-700 
                        ${day === selectedDay ? "text-blue-600 dark:text-blue-400 bg-gray-50 dark:bg-gray-700/50 rounded-t-lg" : "text-gray-500 dark:text-gray-300"}`
                    }
                    onClick={() => setSelectedDay(day)}
                >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {day}
Â  Â  Â  Â  Â  Â  Â  Â  </th>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  {times.map((time) => (
Â  Â  Â  Â  Â  Â  Â  <tr key={time} className="h-20">
Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-2 border-r dark:border-gray-700 text-sm font-extrabold text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 rounded-l-lg">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {time.slice(0, 5)}
Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  {days.map((day) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={day + time}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="p-1 h-full align-middle transition duration-150"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {renderSessionSlot(day, time)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  );
Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  </table>
Â  Â  Â  </div>

Â  Â  Â  {/* Modal (Unchanged) */}
Â  Â  Â  <AnimatePresence>
Â  Â  Â  Â  {showModal && canEdit && ( // Modal only shows if canEdit is true
Â  Â  Â  Â  Â  <motion.div 
Â  Â  Â  Â  Â  Â  className="fixed inset-0 bg-black bg-opacity-70 dark:bg-opacity-80 flex items-center justify-center z-50 p-4 backdrop-blur-sm"
Â  Â  Â  Â  Â  Â  initial={{ opacity: 0 }}
Â  Â  Â  Â  Â  Â  animate={{ opacity: 1 }}
Â  Â  Â  Â  Â  Â  exit={{ opacity: 0 }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <motion.div 
Â  Â  Â  Â  Â  Â  Â  className="bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-2xl w-full max-w-md border border-gray-100 dark:border-gray-700"
Â  Â  Â  Â  Â  Â  Â  initial={{ y: -50, opacity: 0 }}
Â  Â  Â  Â  Â  Â  Â  animate={{ y: 0, opacity: 1 }}
Â  Â  Â  Â  Â  Â  Â  exit={{ y: 50, opacity: 0 }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-extrabold text-blue-600 dark:text-blue-400 mb-6 flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  {editingEntry ? <Edit size={24} /> : <Plus size={24} />} 
Â  Â  Â  Â  Â  Â  Â  Â  {editingEntry ? "Edit Session" : "Add New Session"}
Â  Â  Â  Â  Â  Â  Â  </h2>

Â  Â  Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-xl p-3 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 dark:border-gray-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={form.day}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setForm({ ...form, day: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Day</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {days.map((d) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={d} value={d}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {d}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </select>

Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-xl p-3 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 dark:border-gray-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={form.time}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setForm({ ...form, time: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Time</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {times.map((t) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={t} value={t}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {t.slice(0, 5)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </select>

Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Subject Name (e.g., Web Dev, DBMS)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-xl p-3 bg-gray-50 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 dark:border-gray-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={form.subject}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setForm({ ...form, subject: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Location (e.g., L-101, C-Lab 3)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-xl p-3 bg-gray-50 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-150 dark:border-gray-600"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={form.location}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setForm({ ...form, location: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-end space-x-3 pt-6">
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-5 py-3 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-xl font-semibold hover:bg-gray-300 dark:hover:bg-gray-600 transition duration-200 flex items-center gap-2"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowModal(false)}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <X size={20} /> Cancel
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-5 py-3 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition duration-200 shadow-md hover:shadow-lg flex items-center gap-2"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleSave}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Save size={20} /> Save Changes
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  )}
Â  Â  Â  </AnimatePresence>
Â  Â  </div>
Â  );
}